version: "2.4"

services:

  traefik:
    image: traefik:2.5.4
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml
      - ./traefik/acme.json:/acme.json
    environment:
      - "TRAEFIK_CERTIFICATESRESOLVERS_LETSENCRYPT_ACME_EMAIL"

  backend:
    build:
      context: ./
      dockerfile: containers/backend/Dockerfile
    restart: unless-stopped
    environment:
      - "HUTBEE_PRODUCTION=true"
      - "CONTROLLER_HOSTNAME"
      - "MONGO_DB_NAME"
      - "MONGO_HOST"
      - "MONGO_PORT"
      - "MONGO_PASSWORD"
      - "MONGO_USERNAME"
      - "JWT_SECRET_KEY"
      - "TELEGRAM_BOT_TOKEN"
      - "CONTROLLER_RABBITMQ_USERNAME"
      - "CONTROLLER_RABBITMQ_PASSWORD"
      - "CONTROLLER_RABBITMQ_PORT"
      - "BACKEND_RABBITMQ_USERNAME"
      - "BACKEND_RABBITMQ_PASSWORD"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend-http.entrypoints=http"
      - "traefik.http.routers.backend-http.rule=Host(`${BACKEND_HOSTNAME}`)"
      - "traefik.http.routers.backend-http.middlewares=backend-http-redirect@docker"
      - "traefik.http.middlewares.backend-http-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.backend-https.entrypoints=https"
      - "traefik.http.routers.backend-https.rule=Host(`${BACKEND_HOSTNAME}`)"
      - "traefik.http.routers.backend-https.tls.certResolver=letsencrypt"
      - "traefik.http.routers.backend-https.service=backend-https"
      - "traefik.http.services.backend-https.loadbalancer.server.port=80"
      - "traefik.http.routers.backend-rabbitmq-http.entrypoints=http"
      - "traefik.http.routers.backend-rabbitmq-http.rule=Host(`${BACKEND_RABBITMQ_MGMT_HOSTNAME}`)"
      - "traefik.http.routers.backend-rabbitmq-http.service=backend-rabbitmq-https"
      - "traefik.http.routers.backend-rabbitmq-http.middlewares=backend-rabbitmq-http-redirect@docker"
      - "traefik.http.middlewares.backend-rabbitmq-http-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.backend-rabbitmq-https.entrypoints=https"
      - "traefik.http.routers.backend-rabbitmq-https.rule=Host(`${BACKEND_RABBITMQ_MGMT_HOSTNAME}`)"
      - "traefik.http.routers.backend-rabbitmq-https.tls.certResolver=letsencrypt"
      - "traefik.http.routers.backend-rabbitmq-https.service=backend-rabbitmq-https"
      - "traefik.http.services.backend-rabbitmq-https.loadbalancer.server.port=15672"

  controller:
    build:
      context: ./
      dockerfile: containers/backend-proxy/Dockerfile
      args:
        CONTROLLER_PROXY_SSH_PORT: "${CONTROLLER_PROXY_SSH_PORT}"
    restart: unless-stopped
    ports:
      - "${CONTROLLER_PROXY_SSH_PORT}:${CONTROLLER_PROXY_SSH_PORT}"
      - "${CONTROLLER_SSH_PORT}:${CONTROLLER_SSH_PORT}"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.controller-http.entrypoints=http"
      - "traefik.http.routers.controller-http.rule=Host(`${CONTROLLER_HOSTNAME}`)"
      - "traefik.http.routers.controller-http.service=controller-https"
      - "traefik.http.routers.controller-http.middlewares=controller-http-redirect@docker"
      - "traefik.http.middlewares.controller-http-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.controller-https.entrypoints=https"
      - "traefik.http.routers.controller-https.rule=Host(`${CONTROLLER_HOSTNAME}`)"
      - "traefik.http.routers.controller-https.tls.certResolver=letsencrypt"
      - "traefik.http.routers.controller-https.service=controller-https"
      - "traefik.http.services.controller-https.loadbalancer.server.port=80"
      - "traefik.http.routers.controller-rabbitmq-http.entrypoints=http"
      - "traefik.http.routers.controller-rabbitmq-http.rule=Host(`${CONTROLLER_RABBITMQ_MGMT_HOSTNAME}`)"
      - "traefik.http.routers.controller-rabbitmq-http.service=controller-rabbitmq-https"
      - "traefik.http.routers.controller-rabbitmq-http.middlewares=controller-rabbitmq-http-redirect@docker"
      - "traefik.http.middlewares.controller-rabbitmq-http-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.controller-rabbitmq-https.entrypoints=https"
      - "traefik.http.routers.controller-rabbitmq-https.rule=Host(`${CONTROLLER_RABBITMQ_MGMT_HOSTNAME}`)"
      - "traefik.http.routers.controller-rabbitmq-https.tls.certResolver=letsencrypt"
      - "traefik.http.routers.controller-rabbitmq-https.service=controller-rabbitmq-https"
      - "traefik.http.services.controller-rabbitmq-https.loadbalancer.server.port=${CONTROLLER_RABBITMQ_MGMT_PORT}"

  db:
    image: mongo:4.4
    restart: unless-stopped
    volumes:
      - mongo-db:/data/db
      - mongo-configdb:/data/configdb
    environment:
      - "MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD}"
      - "MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME}"
    mem_limit: 1g
    mem_reservation: 1g
    command: "--wiredTigerCacheSizeGB 1.0"

  mongo-express:
    image: mongo-express:1.0.0-alpha
    restart: unless-stopped
    environment:
      - "ME_CONFIG_MONGODB_ADMINUSERNAME=${MONGO_USERNAME}"
      - "ME_CONFIG_MONGODB_ADMINPASSWORD=${MONGO_PASSWORD}"
      - "ME_CONFIG_MONGODB_SERVER=${MONGO_HOST}"
      - "ME_CONFIG_MONGODB_PORT=${MONGO_PORT}"
      - "ME_CONFIG_BASICAUTH_USERNAME"
      - "ME_CONFIG_BASICAUTH_PASSWORD"
      - "ME_CONFIG_SITE_COOKIESECRET"
      - "ME_CONFIG_SITE_SESSIONSECRET"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mongo-express-http.entrypoints=http"
      - "traefik.http.routers.mongo-express-http.rule=Host(`${MONGO_MGMT_HOSTNAME}`)"
      - "traefik.http.routers.mongo-express-http.middlewares=mongo-express-http-redirect@docker"
      - "traefik.http.middlewares.mongo-express-http-redirect.redirectscheme.scheme=https"
      - "traefik.http.routers.mongo-express-https.entrypoints=https"
      - "traefik.http.routers.mongo-express-https.rule=Host(`${MONGO_MGMT_HOSTNAME}`)"
      - "traefik.http.routers.mongo-express-https.tls.certResolver=letsencrypt"
      - "traefik.http.routers.mongo-express-https.service=mongo-express-https"
      - "traefik.http.services.mongo-express-https.loadbalancer.server.port=8081"

  backend-rabbitmq:
    image: rabbitmq:3-management
    restart: unless-stopped
    environment:
      - "RABBITMQ_DEFAULT_USER=${BACKEND_RABBITMQ_USERNAME}"
      - "RABBITMQ_DEFAULT_PASS=${BACKEND_RABBITMQ_PASSWORD}"
    volumes:
      - rabbitmq:/var/lib/rabbitmq

volumes:
  mongo-db:
  mongo-configdb:
  rabbitmq:
